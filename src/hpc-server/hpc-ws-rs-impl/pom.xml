<!-- * pom.xml *
 * Copyright SVG, Inc.
 * Copyright Leidos Biomedical Research,Inc
 *
 * *Distributed under the OSI-approved BSD 3-Clause License.
 * See http://ncip.github.com/HPC/LICENSE.txt	for details.
 *
 * @author <a href="mailto:eran.rosenberg@nih.gov">Eran Rosenberg</a>
 * @author <a href="mailto:william.liu2@nih.gov">William Yu-Wei Liu</a>
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <name>HPC REST Services Implementation</name>
  <parent>
    <groupId>gov.nih.nci.hpc</groupId>
    <artifactId>hpc-server</artifactId>
    <version>2.9.0</version>
  </parent>
  <artifactId>hpc-ws-rs-impl</artifactId>
  <packaging>bundle</packaging>
  <properties>
    <ca.certs.filename>cacerts</ca.certs.filename>
    <ca.certs.jks.filename>cacerts.jks</ca.certs.jks.filename>
    <hpc.client.cert.filename>hpc-client.crt</hpc.client.cert.filename>
    <hpc.client.entry.dname>CN=HPC Client, OU=NIH, O=NCI, L=Frederick, ST=MD, C=US
    </hpc.client.entry.dname>
    <hpc.client.jks.filename>hpc-client-keystore.jks</hpc.client.jks.filename>
    <hpc.client.jks.pass>hpc-client-pwd</hpc.client.jks.pass>
    <hpc.client.key.alias>hpc-client-key</hpc.client.key.alias>
    <hpc.client.key.pass>hpc-client-pwd</hpc.client.key.pass>
    <hpc.server.entry.dname>CN=HPC Server, OU=NIH, O=NCI, L=Frederick, ST=MD, C=US
    </hpc.server.entry.dname>
    <hpc.server.jks.keystore.filename>keystore.jks</hpc.server.jks.keystore.filename>
    <hpc.server.key.alias>hpc-server-key</hpc.server.key.alias>
    <hpc.server.key.pass>changeit</hpc.server.key.pass>
    <hpc.server.store.pass>hpc-server-store-pwd</hpc.server.store.pass>
    <irods.cert.alias>NIH-IRODS</irods.cert.alias>
    <irods.cert.filename>irods.crt</irods.cert.filename>
    <authdev.cert.alias>NIH-AUTH-DEV</authdev.cert.alias>
    <authdev.cert.filename>authdev.crt</authdev.cert.filename>
    <authtest.cert.alias>NIH-AUTH-TEST</authtest.cert.alias>
    <authtest.cert.filename>authtest.crt</authtest.cert.filename>
    <auth.cert.alias>NIH-AUTH</auth.cert.alias>
    <auth.cert.filename>authproxyint.crt</auth.cert.filename>
    <hhs.intermediate.cert.alias>HHS-FPKI-Intermediate</hhs.intermediate.cert.alias>
    <hhs.intermediate.cert.filename>HHS-FPKI-Intermediate.crt</hhs.intermediate.cert.filename>
    <entrust.root.cert.alias>NIH-ENTRUST-ROOT-LK1</entrust.root.cert.alias>
    <entrust.root.cert.filename>entrust-root.crt</entrust.root.cert.filename>
    <federal.root.cert.alias>Federal_CP_Root_SHA256</federal.root.cert.alias>
    <federal.root.cert.filename>Federal_CP_Root_SHA256.crt</federal.root.cert.filename>
    <ldap.root.cert.alias>NIH-DPKI-ROOT-1A</ldap.root.cert.alias>
    <ldap.root.cert.filename>ldap-root.crt</ldap.root.cert.filename>
    <main.resources.dir>${basedir}/src/main/resources</main.resources.dir>
    <nih.ldap.cert.alias>NIH-DPKI-CA-1A</nih.ldap.cert.alias>
    <nih.ldap.cert.filename>ldap-intermediate.crt</nih.ldap.cert.filename>
    <store.pass>changeit</store.pass>
    <validity.days>36500</validity.days>
  </properties>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
            <Export-Package />
            <Private-Package>
              gov.nih.nci.hpc.ws.rs.impl,
              gov.nih.nci.hpc.ws.rs.interceptor,
              gov.nih.nci.hpc.ws.rs.provider
            </Private-Package>
            <Import-Package>
              META-INF.cxf,
              org.apache.cxf.bus.spring,
              org.apache.cxf.common.injection,
              javax.ws.rs,
              *
            </Import-Package>
          </instructions>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>${main.resources.dir}</directory>
              <includes>
                <include>${ca.certs.jks.filename}</include>
                <include>${ca.certs.filename}</include>
                <include>${hpc.client.cert.filename}</include>
                <include>${hpc.client.jks.filename}</include>
                <include>${hpc.server.jks.keystore.filename}</include>
              </includes>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.coderplus.maven.plugins</groupId>
        <artifactId>copy-rename-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-java-default-cacerts</id>
            <phase>initialize</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <sourceFile>${JAVA_HOME}/jre/lib/security/${ca.certs.filename}</sourceFile>
              <destinationFile>${main.resources.dir}/${ca.certs.jks.filename}</destinationFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>keytool-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>importLdapRootCertificate</id>
            <goals>
              <goal>importCertificate</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${ca.certs.jks.filename}</keystore>
              <file>${main.resources.dir}/certs/${ldap.root.cert.filename}</file>
              <storepass>${store.pass}</storepass>
              <alias>${ldap.root.cert.alias}</alias>
              <trustcacerts>true</trustcacerts>
              <noprompt>true</noprompt>
              <skipIfExist>false</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <id>importIrodsCertificate</id>
            <goals>
              <goal>importCertificate</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${ca.certs.jks.filename}</keystore>
              <file>${main.resources.dir}/certs/${irods.cert.filename}</file>
              <storepass>${store.pass}</storepass>
              <alias>${irods.cert.alias}</alias>
              <trustcacerts>true</trustcacerts>
              <noprompt>true</noprompt>
              <skipIfExist>false</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <id>importLdapIntermediateCertificate</id>
            <goals>
              <goal>importCertificate</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${ca.certs.jks.filename}</keystore>
              <file>${main.resources.dir}/certs/${nih.ldap.cert.filename}</file>
              <storepass>${store.pass}</storepass>
              <alias>${nih.ldap.cert.alias}</alias>
              <trustcacerts>true</trustcacerts>
              <noprompt>true</noprompt>
              <skipIfExist>false</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <id>importAuthdevCertificate</id>
            <goals>
              <goal>importCertificate</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${ca.certs.jks.filename}</keystore>
              <file>${main.resources.dir}/certs/${authdev.cert.filename}</file>
              <storepass>${store.pass}</storepass>
              <alias>${authdev.cert.alias}</alias>
              <trustcacerts>true</trustcacerts>
              <noprompt>true</noprompt>
              <skipIfExist>false</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <id>importAuthtestCertificate</id>
            <goals>
              <goal>importCertificate</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${ca.certs.jks.filename}</keystore>
              <file>${main.resources.dir}/certs/${authtest.cert.filename}</file>
              <storepass>${store.pass}</storepass>
              <alias>${authtest.cert.alias}</alias>
              <trustcacerts>true</trustcacerts>
              <noprompt>true</noprompt>
              <skipIfExist>false</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <id>importAuthCertificate</id>
            <goals>
              <goal>importCertificate</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${ca.certs.jks.filename}</keystore>
              <file>${main.resources.dir}/certs/${auth.cert.filename}</file>
              <storepass>${store.pass}</storepass>
              <alias>${auth.cert.alias}</alias>
              <trustcacerts>true</trustcacerts>
              <noprompt>true</noprompt>
              <skipIfExist>false</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <id>importHhsIntermediateCertificate</id>
            <goals>
              <goal>importCertificate</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${ca.certs.jks.filename}</keystore>
              <file>${main.resources.dir}/certs/${hhs.intermediate.cert.filename}</file>
              <storepass>${store.pass}</storepass>
              <alias>${hhs.intermediate.cert.alias}</alias>
              <trustcacerts>true</trustcacerts>
              <noprompt>true</noprompt>
              <skipIfExist>false</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <id>importEntrustRootCertificate</id>
            <goals>
              <goal>importCertificate</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${ca.certs.jks.filename}</keystore>
              <file>${main.resources.dir}/certs/${entrust.root.cert.filename}</file>
              <storepass>${store.pass}</storepass>
              <alias>${entrust.root.cert.alias}</alias>
              <trustcacerts>true</trustcacerts>
              <noprompt>true</noprompt>
              <skipIfExist>false</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <id>importFederalRootCertificate</id>
            <goals>
              <goal>importCertificate</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${ca.certs.jks.filename}</keystore>
              <file>${main.resources.dir}/certs/${federal.root.cert.filename}</file>
              <storepass>${store.pass}</storepass>
              <alias>${federal.root.cert.alias}</alias>
              <trustcacerts>true</trustcacerts>
              <noprompt>true</noprompt>
              <skipIfExist>false</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <id>generateServerKeystore</id>
            <goals>
              <goal>generateKeyPair</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${hpc.server.jks.keystore.filename}</keystore>
              <storepass>${store.pass}</storepass>
              <keypass>${hpc.server.key.pass}</keypass>
              <alias>${hpc.server.key.alias}</alias>
              <dname>${hpc.server.entry.dname}</dname>
              <validity>${validity.days}</validity>
              <skipIfExist>true</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <id>generateClientCertificate</id>
            <goals>
              <goal>generateKeyPair</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${hpc.client.jks.filename}</keystore>
              <storepass>${hpc.client.jks.pass}</storepass>
              <keypass>${hpc.client.key.pass}</keypass>
              <alias>${hpc.client.key.alias}</alias>
              <dname>${hpc.client.entry.dname}</dname>
              <validity>${validity.days}</validity>
              <skipIfExist>true</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <id>exportClientCertificate</id>
            <goals>
              <goal>exportCertificate</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${hpc.client.jks.filename}</keystore>
              <file>${main.resources.dir}/${hpc.client.cert.filename}</file>
              <rfc>true</rfc>
              <storepass>${hpc.client.jks.pass}</storepass>
              <alias>${hpc.client.key.alias}</alias>
            </configuration>
          </execution>
          <execution>
            <id>importClientCertificate</id>
            <goals>
              <goal>importCertificate</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <keystore>${main.resources.dir}/${hpc.server.jks.keystore.filename}</keystore>
              <file>${main.resources.dir}/${hpc.client.cert.filename}</file>
              <storepass>${hpc.server.store.pass}</storepass>
              <alias>${hpc.client.key.alias}</alias>
              <trustcacerts>true</trustcacerts>
              <noprompt>true</noprompt>
              <skipIfExist>true</skipIfExist>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>attach-artifact</goal>
            </goals>
            <configuration>
              <artifacts>
                <artifact>
                  <file>${main.resources.dir}/${ca.certs.jks.filename}</file>
                  <type>jks</type>
                  <classifier>cacerts</classifier>
                </artifact>
                <artifact>
                  <file>${main.resources.dir}/${hpc.server.jks.keystore.filename}</file>
                  <type>jks</type>
                  <classifier>keystore</classifier>
                </artifact>
              </artifacts>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>hpc-ws-rs-api</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>hpc-bus-service-api</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-frontend-jaxrs</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
  </dependencies>

</project>
