create materialized view log on r_meta_main
    with sequence, rowid (meta_attr_value,meta_attr_name,meta_id,create_ts)
    including new values;

create materialized view log on r_objt_metamap
    with sequence, rowid (meta_id,object_id)
    including new values;

create materialized view log on r_data_main with sequence, rowid (data_id, coll_id, create_ts) including new values;

create materialized view log on r_coll_main with sequence, rowid (coll_id, create_ts) including new values;

create materialized view log on "HPC_DATA_MANAGEMENT_CONFIGURATION" with sequence, rowid ("DOC", "ID", "BASE_PATH") including new values;

create materialized view irods.r_report_registered_by
    build immediate
    refresh fast on commit
    enable query rewrite as
SELECT  a.meta_attr_name,
        a.meta_attr_value,
        b.object_id,
        b.meta_id,
        c.create_ts,
        count(*)
FROM r_meta_main a,
     r_objt_metamap b,
     r_data_main c
WHERE a.meta_id = b.meta_id
  AND b.object_id = c.data_id
  AND cast(a.meta_attr_name as varchar2(250)) = cast('registered_by' as varchar2(50))
group by  a.meta_attr_name,
          a.meta_attr_value,
          b.object_id,
          b.meta_id,
          c.create_ts;

create unique index r_report_registered_by_uidx1
    on irods.r_report_registered_by (meta_attr_name, meta_attr_value, object_id);


create materialized view irods.r_data_hierarchy_metamap as
WITH r_data_hierarchy(parent_coll_name, coll_name, coll_id, object_id, object_path, data_level) AS (
    SELECT data_coll.coll_name,
           cast(NULL as varchar2(2700)),
           cast(NULL as number(19)),
           data_base.data_id,
           (cast(data_coll.coll_name as varchar2(2700)) || cast('/' as varchar2(1))) || cast(data_base.data_name as varchar2(2700)),
           1
    FROM r_data_main data_base,
         r_coll_main data_coll
    WHERE data_base.coll_id = data_coll.coll_id
    UNION ALL
    SELECT coll_iter.parent_coll_name,
           coll_iter.coll_name,
           coll_iter.coll_id,
           coll_hierarchy_iter.object_id,
           coll_hierarchy_iter.object_path,
           coll_hierarchy_iter.data_level + 1
    FROM r_coll_main coll_iter,
         r_data_hierarchy coll_hierarchy_iter
    WHERE cast(coll_iter.coll_name as varchar2(2700)) <> cast('/' as varchar2(1))
      AND cast(coll_iter.coll_name as varchar2(2700)) = cast(coll_hierarchy_iter.parent_coll_name as varchar2(2700))
)
SELECT data_hierarchy.object_id,
       data_hierarchy.object_path,
       metamap.meta_id,
       data_hierarchy.coll_id,
       data_hierarchy.data_level
FROM r_data_hierarchy data_hierarchy,
     r_objt_metamap metamap
WHERE data_hierarchy.object_id = metamap.object_id AND data_hierarchy.coll_id IS NULL
   OR data_hierarchy.coll_id = metamap.object_id;

comment on column irods.r_data_hierarchy_metamap.object_id is 'Data object Hierarchy ID: r_data_main.data_id';

comment on column irods.r_data_hierarchy_metamap.object_path is 'Data object Hierarchy Path:  r_coll_main.coll_name / r_data_main.data_name';

comment on column irods.r_data_hierarchy_metamap.meta_id is 'Metadata ID: r_meta_main.meta_id';

comment on column irods.r_data_hierarchy_metamap.coll_id is 'Collection (in the hierarchy) ID: r_coll_main.coll_id. Null if the metadata is associated with the data object itself';

comment on column irods.r_data_hierarchy_metamap.data_level is 'The level of the metadata in the hierarchy, starting with 1 at the data-object level';


create unique index r_data_hierarchy_metamap_unique
    on irods.r_data_hierarchy_metamap (object_id, meta_id, data_level);



create materialized view irods.r_data_hierarchy_meta_main as
SELECT data_hierarchy_metamap.object_id,
       data_hierarchy_metamap.object_path,
       data_hierarchy_metamap.coll_id,
       data_hierarchy_metamap.meta_id,
       data_hierarchy_metamap.data_level,
       CASE
           WHEN data_hierarchy_metamap.data_level = 1 THEN cast('DataObject' as  varchar2(50))
           ELSE coll_type_metadata.meta_attr_value
           END AS level_label,
       meta_main.meta_attr_name,
       meta_main.meta_attr_value,
       meta_main.meta_attr_unit
FROM r_data_hierarchy_metamap data_hierarchy_metamap
         LEFT JOIN r_meta_main meta_main ON data_hierarchy_metamap.meta_id = meta_main.meta_id
         LEFT JOIN (r_objt_metamap metamap
    JOIN r_meta_main coll_type_metadata ON metamap.meta_id = coll_type_metadata.meta_id AND
                                           cast(coll_type_metadata.meta_attr_name as varchar2(250)) = cast('collection_type' as varchar2(50)))
                   ON metamap.object_id = data_hierarchy_metamap.coll_id
ORDER BY data_hierarchy_metamap.object_id;

comment on column irods.r_data_hierarchy_meta_main.object_id is 'Data object Hierarchy ID: r_data_main.data_id';

comment on column irods.r_data_hierarchy_meta_main.coll_id is 'Collection (in the hierarchy) ID: r_coll_main.coll_id. Null if the metadata is associated with the data object itself';

comment on column irods.r_data_hierarchy_meta_main.meta_id is 'Metadata ID: r_meta_main.meta_id';

comment on column irods.r_data_hierarchy_meta_main.data_level is 'The level of the metadata in the hierarchy, starting with 1 at the data-object level';

comment on column irods.r_data_hierarchy_meta_main.level_label is 'The level label of the metadata in the hierarchy which is the collection_type value at the same level. "DataObject" if the metadata is associated with the data object itself';

comment on column irods.r_data_hierarchy_meta_main.meta_attr_name is 'Metadata attribute: r_meta_main.meta_attr_name';

comment on column irods.r_data_hierarchy_meta_main.meta_attr_value is 'Metadata value: r_meta_main.meta_attr_value';

comment on column irods.r_data_hierarchy_meta_main.meta_attr_unit is 'Metadata unit: r_meta_main.meta_attr_unit';


create unique index r_data_hierarchy_meta_main_unique
    on irods.r_data_hierarchy_meta_main (object_id, meta_id, data_level);

create index r_data_hierarchy_meta_main_path_query
    on irods.r_data_hierarchy_meta_main (object_path);

create index r_data_hierarchy_meta_main_id_query
    on irods.r_data_hierarchy_meta_main (object_id);

create index r_data_hierarchy_meta_main_metadata_query_level
    on irods.r_data_hierarchy_meta_main (meta_attr_name, meta_attr_value, data_level);

create index r_data_hierarchy_meta_main_metadata_query_level_label
    on irods.r_data_hierarchy_meta_main (meta_attr_name, level_label);



create materialized view irods.r_coll_hierarchy_metamap as
WITH r_coll_hierarchy(parent_coll_name, coll_name, coll_id, object_id, object_path, data_level) AS (
    SELECT coll_base.parent_coll_name,
           coll_base.coll_name,
           coll_base.coll_id,
           coll_base.coll_id,
           coll_base.coll_name,
           1
    FROM r_coll_main coll_base
    UNION ALL
    SELECT coll_iter.parent_coll_name,
           coll_iter.coll_name,
           coll_iter.coll_id,
           coll_hierarchy_iter.object_id,
           coll_hierarchy_iter.object_path,
           coll_hierarchy_iter.data_level + 1
    FROM r_coll_main coll_iter,
         r_coll_hierarchy coll_hierarchy_iter
    WHERE cast(coll_iter.coll_name as varchar2(2700)) <> cast('/' as varchar2(1))
      AND cast(coll_iter.coll_name as varchar2(2700)) = cast(coll_hierarchy_iter.parent_coll_name as varchar2(2700))
)
SELECT coll_hierarchy.object_id,
       coll_hierarchy.object_path,
       metamap.meta_id,
       coll_hierarchy.coll_id,
       coll_hierarchy.data_level
FROM r_coll_hierarchy coll_hierarchy,
     r_objt_metamap metamap
WHERE coll_hierarchy.coll_id = metamap.object_id;

comment on column irods.r_coll_hierarchy_metamap.object_id is 'Collection Hierarchy ID: r_coll_main.coll_id';

comment on column irods.r_coll_hierarchy_metamap.object_path is 'Collection Hierarchy Path: r_coll_main.coll_name';

comment on column irods.r_coll_hierarchy_metamap.meta_id is 'Metadata ID: r_meta_main.meta_id';

comment on column irods.r_coll_hierarchy_metamap.coll_id is 'Collection (in the hierarchy) ID: r_coll_main.coll_id. Same as object_id if the metadata is associated with the collection itself';

comment on column irods.r_coll_hierarchy_metamap.data_level is 'The level of the metadata in the hierarchy, starting with 1 at the collection level';


create unique index r_coll_hierarchy_metamap_unique
    on irods.r_coll_hierarchy_metamap (object_id, meta_id, data_level);



create materialized view irods.r_coll_hierarchy_meta_main as
SELECT coll_hierarchy_metamap.object_id,
       coll_hierarchy_metamap.object_path,
       coll_hierarchy_metamap.coll_id,
       coll_hierarchy_metamap.meta_id,
       coll_hierarchy_metamap.data_level,
       coll_type_metadata.meta_attr_value AS level_label,
       meta_main.meta_attr_name,
       meta_main.meta_attr_value,
       meta_main.meta_attr_unit
FROM r_coll_hierarchy_metamap coll_hierarchy_metamap
         LEFT JOIN r_meta_main meta_main ON coll_hierarchy_metamap.meta_id = meta_main.meta_id
         LEFT JOIN (r_objt_metamap metamap
    JOIN r_meta_main coll_type_metadata ON metamap.meta_id = coll_type_metadata.meta_id AND
                                           cast(coll_type_metadata.meta_attr_name as varchar2(250)) = cast('collection_type' as varchar2(50)))
                   ON metamap.object_id = coll_hierarchy_metamap.coll_id
ORDER BY coll_hierarchy_metamap.object_id;

comment on column irods.r_coll_hierarchy_meta_main.object_id is 'Collection Hierarchy ID: r_coll_main.coll_id';

comment on column irods.r_coll_hierarchy_meta_main.object_path is 'Collection Hierarchy Path: r_coll_main.coll_name';

comment on column irods.r_coll_hierarchy_meta_main.coll_id is 'Collection (in the hierarchy) ID: r_coll_main.coll_id. Same as object_id if the metadata is associated with the collection itself';

comment on column irods.r_coll_hierarchy_meta_main.meta_id is 'Metadata ID: r_meta_main.meta_id';

comment on column irods.r_coll_hierarchy_meta_main.data_level is 'The level of the metadata in the hierarchy, starting with 1 at the collection level';

comment on column irods.r_coll_hierarchy_meta_main.level_label is 'The level label of the metadata in the hierarchy which is the collection_type value at the same level';

comment on column irods.r_coll_hierarchy_meta_main.meta_attr_name is 'Metadata attribute: r_meta_main.meta_attr_name';

comment on column irods.r_coll_hierarchy_meta_main.meta_attr_value is 'Metadata value: r_meta_main.meta_attr_value';

comment on column irods.r_coll_hierarchy_meta_main.meta_attr_unit is 'Metadata unit: r_meta_main.meta_attr_unit';


create unique index r_coll_hierarchy_meta_main_unique
    on irods.r_coll_hierarchy_meta_main (object_id, meta_id, data_level);

create index r_coll_hierarchy_meta_main_path_query
    on irods.r_coll_hierarchy_meta_main (object_path);

create index r_coll_hierarchy_meta_main_id_query
    on irods.r_coll_hierarchy_meta_main (object_id);

create index r_coll_hierarchy_meta_main_metadata_query_level
    on irods.r_coll_hierarchy_meta_main (meta_attr_name, meta_attr_value, data_level);

create index r_coll_hierarchy_meta_main_metadata_query_level_label
    on irods.r_coll_hierarchy_meta_main (meta_attr_name, level_label);



create materialized view irods.r_data_hierarchy_meta_attr_name as
SELECT r_data_hierarchy_meta_main.level_label,
       r_data_hierarchy_meta_main.meta_attr_name,
       LISTAGG(r_data_hierarchy_meta_main.object_id) AS object_ids
FROM r_data_hierarchy_meta_main
GROUP BY r_data_hierarchy_meta_main.level_label, r_data_hierarchy_meta_main.meta_attr_name;


create unique index r_data_hierarchy_meta_attr_name_unique
    on irods.r_data_hierarchy_meta_attr_name (level_label, meta_attr_name);

create materialized view irods.r_coll_hierarchy_meta_attr_name as
SELECT r_coll_hierarchy_meta_main.level_label,
       r_coll_hierarchy_meta_main.meta_attr_name,
       LISTAGG(r_coll_hierarchy_meta_main.object_id) AS object_ids
FROM r_coll_hierarchy_meta_main
GROUP BY r_coll_hierarchy_meta_main.level_label, r_coll_hierarchy_meta_main.meta_attr_name;


create unique index r_coll_hierarchy_meta_attr_name_unique
    on irods.r_coll_hierarchy_meta_attr_name (level_label, meta_attr_name);



drop materialized view irods.r_report_source_file_size;
create materialized view irods.r_report_source_file_size
    build immediate
    refresh fast on commit
    enable query rewrite as
SELECT a.rowid as arowid,
       b.rowid as browid,
       c.rowid as crowid,
       a.meta_attr_name,
       a.meta_attr_value,
       b.object_id,
       c.create_ts
FROM r_meta_main a,
     r_objt_metamap b,
     r_data_main c
WHERE a.meta_id = b.meta_id and b.object_id = c.data_id and cast(a.meta_attr_name as varchar2(250)) = cast('source_file_size' as varchar2(50));

create unique index r_report_source_file_size_idx1
    on irods.r_report_source_file_size (meta_attr_name, meta_attr_value, object_id);

create unique index r_report_source_file_size_uidx1
    on irods.r_report_source_file_size (meta_attr_value, meta_attr_name, object_id);



create materialized view irods.r_report_meta_main as
SELECT a.meta_attr_value,
       a.meta_attr_name,
       a.meta_id,
       b.object_id,
       a.create_ts
FROM r_meta_main a
         JOIN r_objt_metamap b ON a.meta_id = b.meta_id;


create unique index r_report_meta_main_uidx1
    on irods.r_report_meta_main (meta_attr_value, meta_attr_name, meta_id, object_id);



create materialized view irods.r_report_data_objects
    build immediate
    refresh fast on commit
    enable query rewrite as
SELECT a.rowid arowid,
       b.rowid browid,
       c.rowid crowid,
       a.data_id,
       c.meta_attr_name,
       c.meta_attr_value,
       a.create_ts
FROM r_data_main a,
     r_objt_metamap b,
     r_meta_main c
WHERE
      a.data_id = b.object_id and b.meta_id = c.meta_id;

create unique index r_report_data_objects_uidx1
    on irods.r_report_data_objects (meta_attr_name, meta_attr_value, data_id);



create materialized view irods.r_report_coll_registered_by
    build immediate
    refresh fast on commit
    enable query rewrite as
SELECT a.meta_attr_name,
       a.meta_attr_value,
       c.coll_id,
       b.meta_id,
       c.create_ts
FROM r_meta_main a,
     r_objt_metamap b,
     r_coll_main c
WHERE a.meta_id = b.meta_id
  AND b.object_id = c.coll_id
  AND cast(a.meta_attr_name as varchar2(250)) = cast('registered_by' as varchar2(50))
GROUP BY a.meta_attr_name,
         a.meta_attr_value,
         c.coll_id,
         b.meta_id,
         c.create_ts;

create unique index r_report_coll_registered_by_uidx1
    on irods.r_report_coll_registered_by (meta_attr_name, meta_attr_value, coll_id);



create materialized view irods.r_report_coll_registered_by_doc
    build immediate
    refresh fast on commit
    enable query rewrite as
SELECT d."DOC",
       a.meta_attr_name,
       a.meta_attr_value,
       c.coll_id,
       b.meta_id,
       c.create_ts,
       count(*)
FROM r_meta_main a,
     r_objt_metamap b,
     r_coll_main c,
     "HPC_DATA_MANAGEMENT_CONFIGURATION" d
WHERE a.meta_id = b.meta_id
  AND b.object_id = c.coll_id
  AND cast(a.meta_attr_name as varchar2(250)) = cast('configuration_id' as varchar2(50))
  AND cast(a.meta_attr_value as varchar2(2700)) = d."ID"
GROUP BY d."DOC",
         a.meta_attr_name,
         a.meta_attr_value,
         c.coll_id,
         b.meta_id,
         c.create_ts;
		 
		 
create unique index r_report_coll_registered_by_doc_uidx1
    on irods.r_report_coll_registered_by_doc (meta_attr_name, meta_attr_value, coll_id, "DOC");



create materialized view irods.r_report_registered_by_doc
    build immediate
    refresh fast on commit
    enable query rewrite as
SELECT d."DOC",
       a.meta_attr_name,
       a.meta_attr_value,
       b.object_id,
       b.meta_id,
       c.create_ts,
       count(*)
FROM r_meta_main a,
     r_objt_metamap b,
     r_data_main c,
     "HPC_DATA_MANAGEMENT_CONFIGURATION" d
WHERE a.meta_id = b.meta_id
  AND b.object_id = c.data_id
  AND cast(a.meta_attr_name as varchar2(250)) = cast('configuration_id' as varchar2(50))
  AND cast(a.meta_attr_value as varchar2(2700)) = d."ID"
GROUP BY d."DOC",
         a.meta_attr_name,
         a.meta_attr_value,
         b.object_id,
         b.meta_id,
         c.create_ts;


create unique index r_report_registered_by_doc_uidx1
    on irods.r_report_registered_by_doc (meta_attr_name, meta_attr_value, object_id, "DOC");



create materialized view irods.r_report_registered_by_basepath
    build immediate
    refresh fast on commit
    enable query rewrite as
SELECT d."BASE_PATH",
       a.meta_attr_name,
       a.meta_attr_value,
       b.object_id,
       b.meta_id,
       c.create_ts
FROM r_meta_main a,
     r_objt_metamap b,
     r_data_main c,
     "HPC_DATA_MANAGEMENT_CONFIGURATION" d
WHERE a.meta_id = b.meta_id
  AND b.object_id = c.data_id
  AND cast(a.meta_attr_name as varchar2(250)) = cast('configuration_id' as varchar2(50))
  AND cast(a.meta_attr_value as varchar2(2700)) = d."ID"
GROUP BY d."BASE_PATH",
         a.meta_attr_name,
         a.meta_attr_value,
         b.object_id,
         b.meta_id,
         c.create_ts;

create unique index r_report_registered_by_basepath_uidx1
    on irods.r_report_registered_by_basepath (meta_attr_name, meta_attr_value, object_id, "BASE_PATH");



create materialized view irods.r_report_coll_registered_by_basepath
    build immediate
    refresh fast on commit
    enable query rewrite as
SELECT d."BASE_PATH",
       a.meta_attr_name,
       a.meta_attr_value,
       c.coll_id,
       b.meta_id,
       c.create_ts,
       count(*)
FROM r_meta_main a,
     r_objt_metamap b,
     r_coll_main c,
     "HPC_DATA_MANAGEMENT_CONFIGURATION" d
WHERE a.meta_id = b.meta_id
  AND b.object_id = c.coll_id
  AND cast(a.meta_attr_name as varchar2(250)) = cast('configuration_id' as varchar2(50))
  AND cast(a.meta_attr_value as varchar2(2700)) = d."ID"
GROUP BY d."BASE_PATH",
         a.meta_attr_name,
         a.meta_attr_value,
         c.coll_id,
         b.meta_id,
         c.create_ts;

create unique index r_report_coll_registered_by_basepath_uidx1
    on irods.r_report_coll_registered_by_basepath (meta_attr_name, meta_attr_value, coll_id, "BASE_PATH");



create materialized view irods.r_report_collection_type
    build immediate
    refresh fast on commit
    enable query rewrite as
SELECT a.rowid as arowid,
       b.rowid as browid,
       c.rowid as crowid,
       a.meta_attr_value,
       a.meta_attr_name,
       b.object_id,
       c.coll_id,
       c.create_ts
FROM r_meta_main a,
     r_objt_metamap b,
     r_coll_main c
WHERE a.meta_id = b.meta_id and b.object_id = c.coll_id and cast(a.meta_attr_name as varchar2(250)) = cast('collection_type' as varchar2(50));

create unique index r_report_collection_type_uidx1
    on irods.r_report_collection_type (meta_attr_name, meta_attr_value, object_id);



create materialized view irods.r_report_coll_registered_by_path as
SELECT DISTINCT c.coll_name,
                a.meta_attr_name,
                a.meta_attr_value,
                c.coll_id,
                b.meta_id,
                c.create_ts
FROM r_meta_main a,
     r_objt_metamap b,
     r_coll_main c
WHERE a.meta_id = b.meta_id
  AND b.object_id = c.coll_id;


create unique index r_report_coll_registered_by_path_uidx1
    on irods.r_report_coll_registered_by_path (meta_attr_name, coll_id, coll_name);



create materialized view irods.r_report_registered_by_path as
SELECT DISTINCT d.coll_name,
                a.meta_attr_name,
                a.meta_attr_value,
                b.object_id,
                b.meta_id,
                c.create_ts
FROM r_meta_main a,
     r_objt_metamap b,
     r_data_main c,
     r_coll_main d
WHERE a.meta_id = b.meta_id
  AND b.object_id = c.data_id
  AND c.coll_id = d.coll_id;


create unique index r_report_registered_by_path_uidx1
    on irods.r_report_registered_by_path (meta_attr_name, object_id, coll_name);


create materialized view irods.r_report_collection_path
    build immediate
    refresh fast on commit
    enable query rewrite as
SELECT d.coll_name,
                b.object_id,
                c.create_ts,
       count(*)
FROM r_meta_main a,
     r_objt_metamap b,
     r_data_main c,
     r_coll_main d
WHERE a.meta_id = b.meta_id
  AND b.object_id = c.data_id
  AND c.coll_id = d.coll_id
GROUP BY  d.coll_name,
          b.object_id,
          c.create_ts;


create unique index r_report_collection_path_uidx1
    on irods.r_report_collection_path (object_id, coll_name);



create materialized view irods.r_catalog_meta_main as
With config_meta(meta_id, meta_namespace,meta_attr_name, meta_attr_value,meta_attr_unit, r_comment,
create_ts, modify_ts,object_id, meta_id_1,create_ts_1, modify_ts_1) as
 (SELECT * from r_meta_main meta_main_1
         JOIN r_objt_metamap metamap ON cast(meta_main_1.meta_attr_name as varchar2(250)) = cast('configuration_id' as varchar2(50)) AND
                                        metamap.meta_id = meta_main_1.meta_id)

SELECT config."DOC",
       config."BASE_PATH",
       meta_main.object_id,
       meta_main.object_path,
       meta_main.meta_id,
       meta_main.meta_attr_name,
       meta_main.meta_attr_value,
       meta_main.meta_attr_unit
FROM r_coll_hierarchy_meta_main meta_main,
     "HPC_DATA_MANAGEMENT_CONFIGURATION" config,
     "HPC_CATALOG_ATTRIBUTE" catalog,
     config_meta
WHERE (meta_main.object_id IN (SELECT r_coll_hierarchy_meta_main.object_id
                               FROM r_coll_hierarchy_meta_main
                               WHERE cast(r_coll_hierarchy_meta_main.meta_attr_name as varchar2(250)) = cast('access' as varchar2(50))
                                 AND (lower(cast(r_coll_hierarchy_meta_main.meta_attr_value as varchar2(2700))) = ANY
                                      (cast('controlled access' as varchar2(50)), cast('open access' as varchar(50))))
                                 AND cast(r_coll_hierarchy_meta_main.level_label as varchar2(50)) = cast('Project' as varchar2(50))
                                 AND r_coll_hierarchy_meta_main.data_level = 1))
  AND catalog.level_label = cast(meta_main.level_label as varchar2(50))
  AND catalog.meta_attr_name = cast(meta_main.meta_attr_name as varchar2(250))
  AND cast(config_meta.meta_attr_value as varchar(4000)) = config."ID"
  AND config_meta.object_id = meta_main.object_id
ORDER BY meta_main.coll_id;

comment on column irods.r_catalog_meta_main."DOC" is 'The DOC of the catalog entry';

comment on column irods.r_catalog_meta_main."BASE_PATH" is 'The base path of the catalog entry';

comment on column irods.r_catalog_meta_main.object_id is 'Collection ID: r_coll_hierarchy_meta_main.object_id';

comment on column irods.r_catalog_meta_main.object_path is 'Collection Path: r_coll_hierarchy_meta_main.object_path';

comment on column irods.r_catalog_meta_main.meta_id is 'Metadata ID: r_coll_hierarchy_meta_main.meta_id';

comment on column irods.r_catalog_meta_main.meta_attr_name is 'Metadata attribute: r_coll_hierarchy_meta_main.meta_attr_name';

comment on column irods.r_catalog_meta_main.meta_attr_value is 'Metadata value: r_coll_hierarchy_meta_main.meta_attr_value';

comment on column irods.r_catalog_meta_main.meta_attr_unit is 'Metadata unit: r_coll_hierarchy_meta_main.meta_attr_unit';


create unique index r_catalog_meta_main_uidx1
    on irods.r_catalog_meta_main (meta_attr_value, meta_attr_name, meta_id, object_id);



create materialized view irods.r_report_registered_by_audit as
SELECT data.data_id,
       basepath."BASE_PATH",
       doc."DOC",
       data.data_path,
       cast(data_size.meta_attr_value as number(19))          AS "DATA_SIZE",
       user_id.meta_attr_value                                AS "USER_ID",
       transfermethod.meta_attr_value                         AS "DATA_TRANSFER_METHOD",
       transfertype.meta_attr_value                           AS "DATA_TRANSFER_TYPE",
       sourceendpoint.meta_attr_value                         AS "SOURCE_ENDPOINT",
       cast(created.meta_attr_value as timestamp)   AS "CREATED",
       cast(completed.meta_attr_value as timestamp) AS "COMPLETED"
FROM r_data_main data
         JOIN r_report_registered_by_basepath basepath ON data.data_id = basepath.object_id
         JOIN r_report_registered_by_doc doc ON data.data_id = doc.object_id
         LEFT JOIN (SELECT r_report_data_objects.data_id,
                           r_report_data_objects.meta_attr_name,
                           r_report_data_objects.meta_attr_value,
                           r_report_data_objects.create_ts
                    FROM r_report_data_objects
                    WHERE cast(r_report_data_objects.meta_attr_name as varchar2(250)) = cast('source_file_size' as varchar2(50))) data_size
                   ON data.data_id = data_size.data_id
         LEFT JOIN (SELECT r_report_data_objects.data_id,
                           r_report_data_objects.meta_attr_name,
                           r_report_data_objects.meta_attr_value,
                           r_report_data_objects.create_ts
                    FROM r_report_data_objects
                    WHERE cast(r_report_data_objects.meta_attr_name as varchar2(250)) = cast('registered_by' as varchar2(50))) user_id
                   ON data.data_id = user_id.data_id
         LEFT JOIN (SELECT r_report_data_objects.data_id,
                           r_report_data_objects.meta_attr_name,
                           r_report_data_objects.meta_attr_value,
                           r_report_data_objects.create_ts
                    FROM r_report_data_objects
                    WHERE cast(r_report_data_objects.meta_attr_name as varchar2(250)) = cast('data_transfer_method' as varchar2(50))) transfermethod
                   ON data.data_id = transfermethod.data_id
         LEFT JOIN (SELECT r_report_data_objects.data_id,
                           r_report_data_objects.meta_attr_name,
                           r_report_data_objects.meta_attr_value,
                           r_report_data_objects.create_ts
                    FROM r_report_data_objects
                    WHERE cast(r_report_data_objects.meta_attr_name as varchar2(250)) = cast('data_transfer_type' as varchar2(50))) transfertype
                   ON data.data_id = transfertype.data_id
         LEFT JOIN (SELECT r_report_data_objects.data_id,
                           r_report_data_objects.meta_attr_name,
                           r_report_data_objects.meta_attr_value,
                           r_report_data_objects.create_ts
                    FROM r_report_data_objects
                    WHERE cast(r_report_data_objects.meta_attr_name as varchar2(250)) = cast('data_transfer_started' as varchar2(50))) created
                   ON data.data_id = created.data_id
         LEFT JOIN (SELECT r_report_data_objects.data_id,
                           r_report_data_objects.meta_attr_name,
                           r_report_data_objects.meta_attr_value,
                           r_report_data_objects.create_ts
                    FROM r_report_data_objects
                    WHERE cast(r_report_data_objects.meta_attr_name as varchar2(250)) = cast('data_transfer_completed' as varchar2(50))) completed
                   ON data.data_id = completed.data_id
         LEFT JOIN (SELECT r_report_data_objects.data_id,
                           r_report_data_objects.meta_attr_name,
                           r_report_data_objects.meta_attr_value,
                           r_report_data_objects.create_ts
                    FROM r_report_data_objects
                    WHERE cast(r_report_data_objects.meta_attr_name as varchar2(250)) = cast('source_file_container_id' as varchar2(50))) sourceendpoint
                   ON data.data_id = sourceendpoint.data_id;


create unique index r_report_registered_by_audit_uidx1
    on irods.r_report_registered_by_audit (data_id);

