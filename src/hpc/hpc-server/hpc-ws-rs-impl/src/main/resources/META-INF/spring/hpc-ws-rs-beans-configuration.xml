<?xml version="1.0" encoding="UTF-8"?>
<!--  
 * hpc-ws-rs-beans-configuration.xml
 *
 * Copyright SVG,  Inc.
 * Copyright Leidos Biomedical Research, Inc
 * 
 * Distributed under the OSI-approved BSD 3-Clause License.
 * See http://ncip.github.com/HPC/LICENSE.txt for details.
 *
 * @author <a href="mailto:eran.rosenberg@nih.gov">Eran Rosenberg</a>
 * @version $Id$
 -->

<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:util="http://www.springframework.org/schema/util" 
	   xmlns:cxf="http://cxf.apache.org/core"
	   xmlns:wsa="http://cxf.apache.org/ws/addressing" 
	   xmlns:jaxws="http://cxf.apache.org/jaxws"
	   xmlns:jaxrs="http://cxf.apache.org/jaxrs" 
	   xmlns:sec="http://cxf.apache.org/configuration/security"
	   xmlns:http="http://cxf.apache.org/transports/http/configuration"
	   xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                           http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
	                       http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd
	                       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
	                       http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd
                           http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
                           http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<context:annotation-config />
	<import resource="classpath:META-INF/cxf/cxf.xml" />

	<!--  HTTP-JETTY SSL Configuration -->
	<bean id="sslContextFactory" class="org.eclipse.jetty.http.ssl.SslContextFactory">
		<property name="keyStore" value="${hpc.ws.rs.ssl.keystore.path}" />
		<property name="keyStoreType" value="${hpc.ws.rs.ssl.keystore.type}" />
		<property name="keyStorePassword" value="${hpc.ws.rs.ssl.keystore.password}" />
		<property name="trustStore" value="${hpc.ws.rs.ssl.keystore.path}" />
		<property name="trustStoreType" value="${hpc.ws.rs.ssl.keystore.type}" />
		<property name="trustStorePassword" value="${hpc.ws.rs.ssl.keystore.password}" />
		<property name="wantClientAuth" value="${hpc.ws.rs.ssl.wantClientAuth}" />
		<property name="needClientAuth" value="${hpc.ws.rs.ssl.needClientAuth}" />
	</bean>
    <httpj:engine-factory bus="cxf">
    	<httpj:engine port="${hpc.ws.rs.secured-port}">
    		<httpj:tlsServerParameters/>
            <httpj:connector>
            	<bean class="org.eclipse.jetty.server.ssl.SslSocketConnector">
            		<constructor-arg ref="sslContextFactory"/>
                    <property name="port" value="${hpc.ws.rs.secured-port}" />
                </bean>
           	</httpj:connector>
        </httpj:engine>
	</httpj:engine-factory>
        
	<!-- JAXB Provider -->
	<bean id="jaxbProvider" class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
		<property name="marshallerProperties" ref="jaxbProviderMarshallerProperties" />
	</bean>
	<util:map id="jaxbProviderMarshallerProperties">
		<entry key="jaxb.formatted.output">
			<value type="java.lang.Boolean">true</value>
		</entry>
	</util:map>

	<!-- JSON Provider -->
	<bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
		<property name="namespaceMap" ref="jsonProviderNamespaceMap" />
		<property name="dropRootElement" value="true" />
		<property name="dropCollectionWrapperElement" value="true" />
		<property name="supportUnwrapped" value="true" />
	</bean>
	<util:map id="jsonProviderNamespaceMap" map-class="java.util.Hashtable">
		<entry key="http://hpc.nci.nih.gov/dto/error" value="gov.nih.nci.hpc.dto.error" />
		<entry key="http://hpc.nci.nih.gov/dto/dataset" value="gov.nih.nci.hpc.dto.dataset" />
		<entry key="http://hpc.nci.nih.gov/dto/user" value="gov.nih.nci.hpc.dto.user" />
		<entry key="http://hpc.nci.nih.gov/dto/project" value="gov.nih.nci.hpc.dto.project" />
		<entry key="http://hpc.nci.nih.gov/dto/datamanagement" value="gov.nih.nci.hpc.dto.datamanagement" />
		<entry key="http://hpc.nci.nih.gov/domain/dataset" value="gov.nih.nci.hpc.domain.dataset" />
		<entry key="http://hpc.nci.nih.gov/domain/metadata" value="gov.nih.nci.hpc.domain.metadata" />
		<entry key="http://hpc.nci.nih.gov/domain/user" value="gov.nih.nci.hpc.domain.user" />
		<entry key="http://hpc.nci.nih.gov/domain/project" value="gov.nih.nci.hpc.domain.project" />
		<entry key="http://hpc.nci.nih.gov/domain/datamanagement" value="gov.nih.nci.hpc.domain.datamanagement" />
	</util:map>

	<!-- Exception Mapper Providers -->
	<bean id="hpcExceptionMapper" 
	      class="gov.nih.nci.hpc.ws.rs.provider.HpcExceptionMapper">
		<constructor-arg value="${hpc.ws.rs.stackTraceEnabled}" />
	</bean>
	<bean id="hpcAuthenticationExceptionMapper" 
	      class="gov.nih.nci.hpc.ws.rs.provider.HpcAuthenticationExceptionMapper">
		<constructor-arg value="${hpc.ws.rs.stackTraceEnabled}" />
	</bean>
	<bean id="hpcAuthorizationExceptionMapper" 
	      class="gov.nih.nci.hpc.ws.rs.provider.HpcAuthorizationExceptionMapper">
		<constructor-arg value="${hpc.ws.rs.stackTraceEnabled}" />
	</bean>
	
	<!-- Authentication Interceptor -->
	<bean id="hpcAuthenticationInterceptor" 
	      class="gov.nih.nci.hpc.ws.rs.interceptor.HpcAuthenticationInterceptor">
	      <constructor-arg value="${hpc.ws.rs.ldapAuthentication}" />
	</bean>
	
	<!-- Authorization Interceptor -->
	<bean id="hpcAuthorizationInterceptor" class="org.apache.cxf.interceptor.security.SimpleAuthorizingInterceptor">
   		<property name="methodRolesMap">
      		<map>
      			<!-- User Service Authorizations -->
      			<entry key="registerUser" value="${hpc.ws.rs.auth.register-user}"/>
      			<entry key="updateUser" value="${hpc.ws.rs.auth.update-user}"/>
        		<entry key="getUser" value="${hpc.ws.rs.auth.get-user}"/>
        		<entry key="authenticateUser" value="${hpc.ws.rs.auth.authenticate-user}"/>
        		
        		<!--  Data Management Service Authorizations -->
        		<entry key="registerCollection" value="${hpc.ws.rs.auth.register-collection}"/>
        		<entry key="getCollection" value="${hpc.ws.rs.auth.get-collection}"/>
        		<entry key="getCollections" value="${hpc.ws.rs.auth.get-collections}"/>
        		<entry key="registerDataObject" value="${hpc.ws.rs.auth.register-data-object}"/>
        		<entry key="getDataObjects" value="${hpc.ws.rs.auth.get-data-objects}"/>
        		<entry key="setPermissions" value="${hpc.ws.rs.auth.set-permissions}"/>
        		<entry key="downloadDataObject" value="${hpc.ws.rs.auth.download-data-object}"/>
      		</map>
   		</property>
	</bean>
	      
	<!-- API Version Interceptor -->
	<bean id="hpcAPIVersionInterceptor" 
	      class="gov.nih.nci.hpc.ws.rs.interceptor.HpcAPIVersionInterceptor">
		<constructor-arg value="${hpc.ws.rs.api-version}" />
	</bean>
	
	<!-- Cleanup Interceptor -->
	<bean id="hpcCleanupInterceptor" 
	      class="gov.nih.nci.hpc.ws.rs.interceptor.HpcCleanupInterceptor" />
	
	<!-- JAX-RS Service Beans -->
	<bean id="hpcSecurityRestService" class="gov.nih.nci.hpc.ws.rs.impl.HpcSecurityRestServiceImpl" />
	<bean id="hpcDataManagementRestService" class="gov.nih.nci.hpc.ws.rs.impl.HpcDataManagementRestServiceImpl" />
	
	<!-- CXF JAX-RS Server Config -->
	<jaxrs:server id="hpc-server" address="${hpc.ws.rs.url}" bus="cxf">
		<jaxrs:serviceBeans>
			<ref bean="hpcSecurityRestService" />
			<ref bean="hpcDataManagementRestService" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jaxbProvider" />
			<ref bean="jsonProvider" />
			<ref bean="hpcAuthenticationExceptionMapper" />
			<ref bean="hpcAuthorizationExceptionMapper" />
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			<ref bean="hpcAuthenticationInterceptor" />
			<ref bean="hpcAuthorizationInterceptor" />
      	</jaxrs:inInterceptors>
      	<jaxrs:outInterceptors>
      		<ref bean="hpcAPIVersionInterceptor" />
      		<ref bean="hpcCleanupInterceptor" />
      	</jaxrs:outInterceptors>
	</jaxrs:server>
	
	<!-- CXF JAX-RS Secured Server Config -->
	<jaxrs:server id="hpc-secured-server" address="${hpc.ws.rs.secured-url}" bus="cxf">
		<jaxrs:serviceBeans>
			<ref bean="hpcSecurityRestService" />
			<ref bean="hpcDataManagementRestService" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jaxbProvider" />
			<ref bean="jsonProvider" />
			<ref bean="hpcAuthenticationExceptionMapper" />
			<ref bean="hpcAuthorizationExceptionMapper" />
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			<ref bean="hpcAuthenticationInterceptor" />
			<ref bean="hpcAuthorizationInterceptor" />
      	</jaxrs:inInterceptors>
      	<jaxrs:outInterceptors>
      		<ref bean="hpcAPIVersionInterceptor" />
      		<ref bean="hpcCleanupInterceptor" />
      	</jaxrs:outInterceptors>
	</jaxrs:server>
</beans>

