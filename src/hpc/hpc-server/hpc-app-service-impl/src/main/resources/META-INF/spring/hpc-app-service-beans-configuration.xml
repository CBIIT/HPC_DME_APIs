<?xml version="1.0" encoding="UTF-8"?>
<!--  
 * hpc-app-service-beans-configuration.xml
 *
 * Copyright SVG,  Inc.
 * Copyright Leidos Biomedical Research, Inc
 * 
 * Distributed under the OSI-approved BSD 3-Clause License.
 * See http://ncip.github.com/HPC/LICENSE.txt for details.
 *
 * @author <a href="mailto:eran.rosenberg@nih.gov">Eran Rosenberg</a>
 * @version $Id$
 -->

<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- HPC Application Services Beans -->
	<bean id="hpcUserService" class="gov.nih.nci.hpc.service.impl.HpcUserServiceImpl">
		<constructor-arg ref="hpcUserDAO" />
		<constructor-arg ref="hpcDataTransferService" />
	</bean>

	<bean id="hpcDatasetService" class="gov.nih.nci.hpc.service.impl.HpcDatasetServiceImpl">
		<constructor-arg ref="hpcDatasetDAO" />
		<constructor-arg ref="hpcKeyGenerator" />
		<constructor-arg ref="hpcUserService" />
		<constructor-arg ref="hpcDataTransferService" />
		<constructor-arg ref="hpcTransferStatusService" />		
	</bean>

	<bean id="hpcDataTransferService" class="gov.nih.nci.hpc.service.impl.HpcDataTransferServiceImpl">
		<constructor-arg ref="hpcDataTransferProxy" />
		<constructor-arg ref="hpcDataTransferAccountValidatorProvider" />
	</bean>

	<bean id="hpcTransferStatusService" class="gov.nih.nci.hpc.service.impl.HpcTransferStatusServiceImpl">
		<constructor-arg ref="transferStatusDAO" />
		<constructor-arg ref="hpcDataTransferProxy" />
	</bean>
	
	<bean id="hpcProjectService" class="gov.nih.nci.hpc.service.impl.HpcProjectServiceImpl">
		<constructor-arg ref="hpcProjectDAO" />
	</bean>	

	<bean id="hpcLdapAuthenticationService" class="gov.nih.nci.hpc.service.impl.HpcLdapAuthenticationServiceImpl">
		<constructor-arg ref="ldapAuthProvider" />
	</bean>	
	
	<bean id="hpcKeyGenerator" class="gov.nih.nci.hpc.service.impl.HpcUUIDKeyGeneratorImpl" />

	<bean id="contextSource"
	        class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
	  <constructor-arg value="ldaps://ncids4a.nci.nih.gov:636,ou=nci,o=nih"/>
	</bean>
	
	<bean id="ldapAuthProvider"
	    class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
		<!-- strategy for handling the actual authentication against the LDAP repository -->
    	<constructor-arg ref="authenticator" />
		 <!-- strategy for retrieving a user's set of granted authorities -->
    	<constructor-arg ref="populator" />
	</bean>
	<bean id="authenticator"
	      class="org.springframework.security.ldap.authentication.BindAuthenticator">
	    <constructor-arg ref="contextSource" />
	    <!--  how to find a user in LDAP -->
	    <property name="userDnPatterns">
	        <list>
		    <!-- {0} servers as a pattern argument placeholder for a username -->
		    <value>uid={0},ou=nci,o=nih</value>
		</list>
	    </property>
	</bean>	
	<bean id="populator"
	      class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
	    <constructor-arg ref="contextSource" />
	    <!--  group based DN - we will be searching for groups in "ou=groups,dc=example,dc=com" -->
	    <constructor-arg value="ou=groups" />
	    
	    <!-- the name of the attribute that will contain role information (which
	         effectively translates to a user's granted authorities. Default is "cn" -->
	    <property name="groupRoleAttribute" value="ou" />
	    
	    <!-- case normalization to upper case. Default is true -->
	    <property name="convertToUpperCase" value="false" />
	    
	    <!-- role prefix to append to the group name. Default is "ROLE_". -->
	    <property name="rolePrefix" value="" />
	</bean>	
</beans>