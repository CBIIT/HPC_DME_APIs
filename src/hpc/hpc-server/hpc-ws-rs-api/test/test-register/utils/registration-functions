#!/usr/bin/env bash
# Readme.txt
# @author: George Zaki 
# 
# Copyright Leidos Biomedical Research, Inc
# 
# Distributed under the OSI-approved BSD 3-Clause License.
# See http://ncip.github.com/HPC/LICENSE.txt for details.
#


#Validate input attributes against a mandatory and restricted list.
#Inputs: input-file.json
#        policies-attributes  

function validate_input {


    INPUT_FILE="$1"
    POLICIES_ATTRIBUTES="$2"


    MANDATORY_POLICIES_ATTRIBUTES=`echo "$POLICIES_ATTRIBUTES" | grep '"mandatory":true'`


    #default should not be specified 
    MANDATORY_POLICIES_ATTRIBUTES=`echo "$MANDATORY_POLICIES_ATTRIBUTES" | grep -v '"defaultValue"'`
    MANDATORY_POLICIES_ATTRIBUTES_NAMES=`get_json_value "$MANDATORY_POLICIES_ATTRIBUTES"  attribute`

    #echo "$MANDATORY_POLICIES_ATTRIBUTES"
    #echo "$MANDATORY_POLICIES_ATTRIBUTES_NAMES"
    
    RESTRICTED_POLICIES_ATTRIBUTES=`echo "$POLICIES_ATTRIBUTES" | grep '"validValues"'`
    RESTRICTED_POLICIES_ATTRIBUTES_NAMES=`get_json_value "$RESTRICTED_POLICIES_ATTRIBUTES" attribute`
    #echo "$RESTRICTED_POLICIES_ATTRIBUTES_NAMES"
    
    #READ the input json file
    ONE_LINE=`tr "\n" " " < $INPUT_FILE`
    INPUT_GROUPS=`echo $ONE_LINE | tr "{" "\n"`
    INPUT_ATTRIBUTES=`get_json_value $INPUT_FILE attribute`
   
    #Convert the variables to an array of strings 
    IFS=$'\n' read -rd '' -a MANDATORY_ARRAY <<<"$MANDATORY_POLICIES_ATTRIBUTES_NAMES"
    IFS=$'\n' read -rd '' -a INPUT_ARRAY <<<"$INPUT_ATTRIBUTES"


    #Check 0: Check that all provided attributes have a value 
    VALUES_PRESENT=YES
    for input_attribute  in "${INPUT_ARRAY[@]}"; do
        input_line=`echo "$INPUT_GROUPS" | grep "\"$input_attribute\"" | tr -d "\n"`
        input_value=`get_json_value "$input_line" value`
        if [ -z "$input_value" ]
        then 
            echo "FAIL0 "
            exit
        fi
    done

    #Check 1: All required attributes are present
    # for (all mandadory attributes)
    #   check that they exist in the input file 
    PASS_MANDATORY="YES"
    for mandatory_attribute in "${MANDATORY_ARRAY[@]}"; do
        #echo $mandatory_attribute
        mandatory_found="NO" 
        for input_attribute  in "${INPUT_ARRAY[@]}"; do
            #echo "comparing $mandatory_attribute with $input_attribute"
            if [ "$input_attribute" == "$mandatory_attribute" ]
            then 
                mandatory_found="YES" 
                #echo "mandatory found"
                break
            fi
        done
        if [ $mandatory_found == "NO" ]
        then
            echo "$mandatory_attribute not found"
            echo "FAIL1"
            exit
            #PASS_MANDATORY="NO"
        fi
    done
   
    IFS=$'\n' read -rd '' -a RESTRICTED_ARRAY <<<"$RESTRICTED_POLICIES_ATTRIBUTES_NAMES"
    
    #Check 2: Attribues have valid values as mandated by the policies file 
    # for (all attributes that have valid values)
    #    Get The list of validValues
    #    Get the actual input value
    #    Compare 

     
    PASS_RESTRICTED="YES"
    for restricted_attribute in "${RESTRICTED_ARRAY[@]}"; do
        input_line=`echo "$INPUT_GROUPS" | grep "\"$restricted_attribute\"" | tr -d "\n"`
        if [ ! -z "$input_line" ]
        then
            policies_line=`echo "$POLICIES_ATTRIBUTES" | grep "\"$restricted_attribute\""`
            #echo $policies_line
            valid_values=`get_json_hier_array_value "$policies_line" validValues`
            input_value=`get_json_value "$input_line" value`
            #echo $input_value
            #echo $valid_values
            if [[ ! "$valid_values" == *"$input_value"* ]]
            then
                echo "$restricted_attribute has an invalid value."
                echo "FAIL2"
                exit
                #PASS_RESTRICTED="NO"
            fi
        fi
    done 


    
    if [ "$PASS_MANDATORY" == "YES" ]  &&  [ "$PASS_RESTRICTED" == "YES" ] && [ "$VALUES_PRESENT" == "YES" ]
    then
        echo "PASS" 
    else
        echo "FAIL"
    fi



}


#Check if the input colleciton values are valid
#Inputs: policies-file.json
#        input-file.json
#        collection type

function validate_collection {

    POLICIES_FILE=$1
    INPUT_FILE=$2

    COLLECTION_ATTRIBUTES=`cat "$POLICIES_FILE"` 
    if [ -z "$COLLECTION_ATTRIBUTES" ] 
    then
        echo "No policies for collection type:$COLLECTION_TYPE"
        exit
    fi
    #echo "$COLLECTION_ATTRIBUTES"
   
    CHECK=`validate_input  "$INPUT_FILE" "$COLLECTION_ATTRIBUTES"`
    #echo $CHECK
    #if [ "$CHECK" != "PASS" ]
    #then
    #    CHECK="FAIL"
    #fi
    echo $CHECK
}


#Make sure the attribute exists in the response header
function check_attribute {
    RETURNED_MSG="$1"
    ATTRIBUTE="$2"
    CORRECT_VALUE="$3"

    RESPONSE_GROUPS=`cat $RETURNED_MSG | tr "{" "\n"`
    OBJECT_GROUPS=`echo "$RESPONSE_GROUPS" | grep "$ATTRIBUTE"`
    if [ -z "$OBJECT_GROUPS"  ]
    then 
        echo "ERROR: No $ATTRIBUTE is returned" 1>&2
        exit
    fi

    VALUE=`get_json_value "$OBJECT_GROUPS" "value"`
    if [ -z "$VALUE" ]
    then
        echo "ERROR: No $ATTRIBUTE is returned" 1>&2
        exit
    fi

    if ! [ -z "$CORRECT_VALUE" ] 
    then
        if ! [[ "$VALUE" == "$CORRECT_VALUE" ]]
        then
            echo "ERROR: The returned value for $ATTRIBUTE is \"$VALUE\" while it should be \"$CORRECT_VALUE"\" 1>&2
        fi
    fi

}


#Generate a list of the system generated metadata
#Inputs: 1- General policies file
#        2- Type  (either dataOjbects or collection)
#Ouutput: The file "system-generated-metadata.tmp" which contains the attributes names 
#Usage: get_system_added_metadata <policies-file> <type>

function get_system_added_metadata {

    if [ -z "$1" ] || [ -z "$2"  ]
    then
        echo "ERROR: using get_system_added_metadata:"
        echo "USAGE: get_system_added_metadata <policies-file> <type>"
        exit
    fi
 
    POLICIES_FILE="$1"
    METADATA_TYPE="$2"
    OUTPUT_FILE="system-generated-metadata.tmp"

    ONE_LINE=$(tr "\n" " " < "$POLICIES_FILE")
    METADATA_ARRAY=$(get_json_array_value "$ONE_LINE" "$METADATA_TYPE")

    echo "$METADATA_ARRAY" | tr "," "\n" |  tr -d " \""  > $OUTPUT_FILE
#

}





