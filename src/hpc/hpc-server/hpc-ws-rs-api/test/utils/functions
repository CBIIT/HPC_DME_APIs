#!/usr/bin/env bash
# functions
# @author: George Zaki 
# 
# Copyright Leidos Biomedical Research, Inc
# 
# Distributed under the OSI-approved BSD 3-Clause License.
# See http://ncip.github.com/HPC/LICENSE.txt for details.
#
# Common functions used by the unit tests

#Return the HTTP code in the response excluding 100
function get_http_code {
    if [ -z "$1" ]
    then
        echo "ERROR: using get_http_code"
        echo "USAGE: get_http_code <http-response-file>"
        exit
    fi
    grep 'HTTP' $1  | grep '[02-9][0-9][0-9]' | sed 's/.*\([0-9][0-9][0-9]\).*/\1/'
}


#If the input is a filename, return the contents of the file, otherwise return the input
function get_file_value {
    if [ -z "$1" ]
    then
        echo "ERROR: using get_file_value"
        echo "USAGE: get_file_value <input-string>"
        exit
    fi

    INPUT="$1"
    #Check if the input is a file
    if [ -e "$INPUT" ] 
    then
        INPUT=`cat $INPUT`
    fi
    echo "$INPUT"
}


#Return a single value for a given attribute in a json file 
#Inputs: json-file-name(or input string)  attribute-name 
function get_json_value {

    if [ -z "$1" ] || [ -z "$2" ]
    then
        echo "ERROR: using get_json_value"
        echo "USAGE: get_json_value <input-string-or-file> <attribute>"
        exit
    fi
    INPUT="$1"
    ATTRIBUTE="$2"
    INPUT=`get_file_value "$INPUT"`
    echo "$INPUT" | grep "$ATTRIBUTE" | sed "s/.*${ATTRIBUTE}\"[ 	]*:[ 	]*\"\([^\"]*\)\".*/\1/"
}


#Return the array value for a given attribute in a json file 
#Inputs: json-file-name(or input string)  attribute-name 
function get_json_array_value {

    if [ -z "$1" ] || [ -z "$2" ]
    then
        echo "ERROR: using get_json_array_value"
        echo "USAGE: get_json_array_value <input-string-or-file> <attribute>"
        exit
    fi

    INPUT="$1"
    ATTRIBUTE="$2"
    INPUT=`get_file_value "$INPUT"`
    echo "$INPUT" |  grep $ATTRIBUTE | sed "s/.*${ATTRIBUTE}\"[ 	]*:[ 	]*\[\([^]].*\)\].*/\1/"
}


#Return the hierarchical array value for a given attribute in a json string. 
#Limited to two levels of hierarchy. Example "Attribute":[ []   []  ] 
#Inputs: "Input string"  "attribute-name" 
function get_json_hier_array_value {
    INPUT="$1"
    ATTRIBUTE="$2"

    #First define the regex 'a': <text>[<text>]
    #Then generalize 'a' to define 'b': \(a\)*
    #Then define the matched string as: "attribute":['b'<text>]
    echo "$INPUT" | sed "s/\(.*\)\(\"$ATTRIBUTE\"[  ]*:[ 	]*\[\([^][]*\[[^][]*\]\)*[^][]*\]\)\(.*\)/\2/" 
}

#Checks that the response header file has information.
function check_connection {
    if [ -z "$1" ]
    then
        echo "ERROR: using check_connection"
        echo "USAGE: check_connection <response-file>"
        exit
    fi
    RESPONSE_HEADER="$1"
    if [ -e "$RESPONSE_HEADER" ]
    then 
        CONT=`cat "$RESPONSE_HEADER"`
    fi
    if [ -z "$CONT" ]
    then
        echo "ERROR: THE RESPONSE HEADER FILE $RESPONSE_HEADER IS EMPTY, CHECK CONNECTION" 1>&2
        exit
    fi
}

#Get the username from the config file.
function get_username {
    if [ -z "$1" ]
    then
        echo "ERROR: using get_username"
        echo "USAGE: get_username <curl-config-file>"
        exit
    fi
    CURL_CONFIG_FILE="$1"
    USER_NAME=`grep '\-u' "$CURL_CONFIG_FILE" | sed "s/.*\-u[   ]*\([a-zA-Z]*\).*/\1/"`
    echo $USER_NAME
}


#Verify that a collection or a dataObject  was registered correctly
#Input  registration-response-header
function verify_registration {

    if [ -z "$1" ]
    then
        echo "ERROR: using check_registration"
        echo "USAGE: check_registration <registration-response-header-file>"
        exit
    fi

    RESPONSE_HEADER="$1"
    REG_HTTP_CODE=`get_http_code $RESPONSE_HEADER`
    if [ "$REG_HTTP_CODE" != "201" ]  && [ "$REG_HTTP_CODE" != "200" ]
    then
        echo "FAILED TO REGISTER, HTTP_CODE = $REG_HTTP_CODE" 1>&2
        exit
    fi
}

#Register a collection or a dataObject 
#Inputs description.json destinaton-path type 
function curl_register {

    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]
    then
        echo "ERROR: using curl_register"
        echo "USAGE: curl_register <collection-description.json> destination-path <[colleciton|dataObject]>"
        exit
    fi

    DESCRIPTION="$1"
    DESTINATION_PATH="$2"
    TYPE="$3"
    USERID=`get_username $HPC_DM_TEST/utils/config`
    SERVER=`cat $HPC_DM_TEST/utils/server`

    RESPONSE_MSG=${TYPE}-registration-response-message.json.tmp
    RESPONSE_HEADER=${TYPE}-registration-response-header.tmp
    
    curl -H "Content-Type: application/json" -d @$DESCRIPTION -X PUT ${SERVER}/hpc-server/${TYPE}/${DESTINATION_PATH}  --config $HPC_DM_TEST/utils/config  -H "Accept: application/json" -D $RESPONSE_HEADER -o $RESPONSE_MSG -s 2> curl-status 
    check_connection $RESPONSE_HEADER
}

#Substitute the "dxtestuid" string  with the actual username
#Inputs: input_file  output_file
function update_uid {

    if [ -z "$1" ] || [ -z "$2" ]
    then
        echo "ERROR: using update_uid"
        echo "USAGE: update_uid <input-file> <output-file>"
        exit
    fi
    INPUT_FILE="$1"
    OUTPUT_FILE="$2"
    USERID=`get_username $HPC_DM_TEST/utils/config`
    OUT=`cat "$INPUT_FILE" | sed "s/dxtestuid/$USERID/"`
    echo "$OUT" > $OUTPUT_FILE
}
