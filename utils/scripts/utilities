#!/usr/bin/env bash
# functions
# @author: George Zaki 
# 
# Copyright Leidos Biomedical Research, Inc
# 
# Distributed under the OSI-approved BSD 3-Clause License.
# See http://ncip.github.com/HPC/LICENSE.txt for details.
#
# Common utilities sourced by every script 

#Make sure the ./hpcdme.properties exists

function file_check_message  {

    file_name="$1"
    echo "Initializing data management utilities error:" >&2
    echo "Can not find the file $file_name" >&2 
    echo "Read: $HPC_DM_UTILS/README.md for more information" >&2
}

file_name=$HPC_DM_UTILS/hpcdme.properties
if [ ! -e "$file_name" ]
then
    file_check_message  "$file_name"
    exit 1
fi

#source $HPC_DM_UTILS/scripts/functions


#Return the HTTP code in the response excluding 100
#Inputs: <response-header-file>
function get_http_code {
    if [ -z "$1" ]
    then
        echo "ERROR: using get_http_code"
        echo "USAGE: get_http_code <http-response-file>"
        exit
    fi
    grep 'HTTP' $1  | tail -n 1 |  grep '[02-9][0-9][0-9]' | sed 's/.*\([0-9][0-9][0-9]\).*/\1/'
}




#Return a single value for a given attribute in a json file 
#Inputs:   json-file-name(or input string)  
#            attribute-name 
function get_json_value {

  if [ -z "$1" ] || [ -z "$2" ]
  then
      echo "ERROR: using get_json_value" >&2
      echo "USAGE: get_json_value <input-string-or-file> <attribute>" >&2
      exit
  fi
  INPUT="$1"
  ATTRIBUTE="$2"
  INPUT=`get_file_value "$INPUT"`
  echo "$INPUT" | grep "$ATTRIBUTE" | sed "s/.*${ATTRIBUTE}\"[    ]*:[    ]*\"\([^\"]*\)\".*/\1/"
}


#Return a single value for a given attribute in a java properties file 
#Inputs:   properties-file-name(or input string)  
#      :   attribute-name 
function get_value {

  if [ -z "$1" ] || [ -z "$2" ]
  then
      echo "ERROR: using get_value" >&2
      echo "USAGE: get_value <input-string-or-file> <attribute>" >&2
      exit 1
  fi
  INPUT="$1"
  ATTRIBUTE="$2"
  INPUT=`get_file_value "$INPUT"`
  echo "$INPUT" | grep "^[^#]" |  grep "${ATTRIBUTE}\s*=" | sed "s/.*${ATTRIBUTE}[    ]*=[    ]*\(.*\)/\1/"
}




#If the input is a filename, return the contents of the file, otherwise return the input.
#Inputs: <input-string-or-filename>
function get_file_value {
    if [ -z "$1" ]
    then
        echo "ERROR: using get_file_value" >&2
        echo "USAGE: get_file_value <input-string-or-filename>"  >&2
        exit
    fi

    INPUT="$1"
    #Check if the input is a file
    if [ -e "$INPUT" ]
    then
        INPUT=`cat $INPUT`
    fi
    echo "$INPUT"
}


#Get the username from the config file
function get_username {

    local PROPERTIES_FILE=$HPC_DM_UTILS/hpcdme.properties
    local USER_NAME=$(get_value $PROPERTIES_FILE hpc.user)

    if [ -z "$USER_NAME" ]
    then 
        echo "ERROR: Can not retrieve username from $PROPERTIES_FILE" >&2
        exit 1
    fi
    echo $USER_NAME
}


#Get the default Globus endpoint from the config file
function get_globus_endpoint {

    local PROPERTIES_FILE=$HPC_DM_UTILS/hpcdme.properties
    local GLOBUS=$(get_value $PROPERTIES_FILE hpc.default.globus.endpoint)

    if [ -z "$GLOBUS" ]
    then 
        echo "ERROR: Can not retrieve hpc.default.globus.endpoint  from $PROPERTIES_FILE" >&2
        exit 1
    fi
    echo $GLOBUS
}


#Get the globus username from the config file
function get_globus_user {

    local properties_file=$HPC_DM_UTILS/hpcdme.properties
    local globus_user=$(get_value $properties_file hpc.globus.user)

    if [ -z "$globus_user" ]
    then 
        echo "ERROR: Can not retrieve hpc.globus.user from $properties_file" >&2
        exit 1
    fi
    echo $globus_user
}


#Get the server from the config file
function get_server {

    local PROPERTIES_FILE=$HPC_DM_UTILS/hpcdme.properties
    local SERVER_NAME=$(get_value $PROPERTIES_FILE hpc.server.url)

    if [ -z "$SERVER_NAME" ]
    then 
        echo "ERROR: Can not retrieve server from $PROPERTIES_FILE" >&2
        exit 1 
    fi
    echo $SERVER_NAME
}


#Get the jar filename from the config file
function get_jar {

    local PROPERTIES_FILE=$HPC_DM_UTILS/hpcdme.properties
    local JAR_FILE=$(get_value $PROPERTIES_FILE hpc.jar.version)

    if [ -z "$JAR_FILE" ]
    then 
        echo "ERROR: Can not retrieve hpc.jar.version from $PROPERTIES_FILE" >&2
        exit 1 
    fi
    echo $JAR_FILE
}




#Get the globus server from the globus config file
function get_globus_server {

    local SERVER_NAME="https://nexus.api.globusonline.org/"
    echo $SERVER_NAME
}



#Checks that the response header file has information.
#Input:   <response_header> The response header of the curl command
function check_connection {

    if [ -z "$1" ]
    then
        echo "ERROR: using check_connection"
        echo "USAGE: check_connection <response-file>"
        exit 1
    fi
    RESPONSE_HEADER="$1"
    if [ -e "$RESPONSE_HEADER" ]
    then 
        CONT=`cat "$RESPONSE_HEADER"`
    fi
    if [ -z "$CONT" ]
    then
        echo "ERROR: THE RESPONSE HEADER FILE $RESPONSE_HEADER IS EMPTY, CHECK CONNECTION" 1>&2
        exit 1
    fi
}

#Verify that a collection or a dataObject  was registered correctly
#Input  <registration-response-header>
#Input  <registration-response-message>
#Input  <path>
function verify_registration {

    if [ -z "$1" ] || [ -z "$2" ] || [ -z $3 ]
    then
        echo "ERROR: using check_registration"
        echo "USAGE: check_registration <registration-response-header-file> <registration-response-message> <destination-path>" 
        exit 1
    fi

    RESPONSE_HEADER="$1"
    RESPONSE_MSG="$2"
    DESTINATION_PATH="$3"
    REG_HTTP_CODE=`get_http_code $RESPONSE_HEADER`
    if [ "$REG_HTTP_CODE" != "201" ]  && [ "$REG_HTTP_CODE" != "200" ]
    then
        echo "FAILED TO REGISTER <$DESTINATION_PATH> , HTTP_CODE = $REG_HTTP_CODE" 1>&2
        if [ ! -e "$RESPONSE_MSG" ] 
        then
          echo "Can not find the response message file $RESPONSE_MSG" >&2
          exit 1
        else
          MESSAGE=$(get_json_value "$RESPONSE_MSG" message)
          echo "ERROR MESSAGE:$MESSAGE" 1>&2
          exit 1
        fi 
    fi
}


#Get the json description of a file with automatic collection creation  
#Inputs:  <json-attributes> : A string with the json attributes 
function get_json_description {


    USAGE="USAGE: get_json_description <json-attributes>"

    if [ -z "$1" ] 
    then
        echo "ERROR: using get_json_description" >&2
        echo "Received: $@" >&2
        echo "$USAGE" >&2
        exit
    fi

    ATTRIBUTES="$1"
    ALL_ATTRIBUTES="{ \"metadataEntries\": [ $ATTRIBUTES ], \"createParentCollections\": true, \"parentCollectionMetadataEntries\": [ { \"collection_type\", \"value\": \"Folder\" } ] }"

    echo "$ALL_ATTRIBUTES"
}

#Get the metadata for a file
#Inputs:  <file> : The file path 
function get_file_attributes {

    USAGE="USAGE: get_file_attributes <file>"

    if [ -z "$1" ] 
    then
        echo "ERROR: using get_file_attributes" >&2
        echo "Received: $@" >&2
        echo "$USAGE" >&2
        exit
    fi
 
    FILE_PATH="$1"

    FILE_NAME=$(basename $FILE_PATH)

    echo "{\"attribute\":\"basename\",\"value\":\"$FILE_NAME\"}"
}


# list all files in a source main directory as well as sub- directories
#Inputs: <source directory>  The directory to be synced with the Archive
function list_new_files {

    USAGE="USAGE: list_new_files <src-directory>"

    if [ -z "$1" ] 
    then
        echo "ERROR: using list_new_files" >&2
        echo "Received: $@" >&2
        echo "$USAGE" >&2
        exit
    fi
 

    # list all files in a source main directory as well as sub- directories
    # Ex: /test

    SOURCEDIR="$1"
    
    # keep track list of the old files .
    #LAST=/tmp/last.log
    export LAST=""
    
    if [ "$LAST" = "" ]; then
    
      # first time we create the log file
      touch /tmp/last_files.log
      export LAST=/tmp/last_files.log
    else
      echo $LAST is not set
    fi
    
    
    # keep track the list of the current files .
    CURRENT=/tmp/current.log
    
    # list all files
    find $SOURCEDIR -type f > $CURRENT
    
    # list new file list
    diff $LAST $CURRENT > /dev/null 2>&1
    
    # If there is no difference exit
    if [ $? -eq 0 ]
    then
      echo "No changes"
    else
      echo "List of new files"
      diff $LAST $CURRENT | grep '^>' |awk '{print $2}' > /tmp/new_file_list
      # diff last current | grep '^>' |awk '{print $2}'
    
      # Lastly, move CURRENT to LAST
      mv $CURRENT $LAST
      echo '{''"'newfilelist'"'':' '{' > /tmp/new_fil_list.json
 
      while read LINE; do
        echo $LINE
        echo '"filepath"'':' '"'$LINE'"' >> /tmp/new_fil_list.json
      done < /tmp/new_file_list
    fi
    echo '}''}' >>/tmp/new_fil_list.json
    
    
}
    
# Returns a list all files in a globus endpoint and path with  their 
# corresponding asychronous registration json file as shown in 
# HPC_DM_UTIlS/templates/dataobject-async-metadata.json
#Inputs: <globus-endpoint> The globus endpoint UUID 
#        <globus-path>     The directory path within the globus endpoint
function list_globus_files {

    USAGE="USAGE: list_globus_files <globus-endpoint> <globus-path>"

    if [ "$#" -ne 2 ]
    then
        echo "ERROR: using list_globus_files" >&2
        echo "Received: $@" >&2
        echo "$USAGE" >&2
        exit
    fi

    #Generate a globus token

    #Get all files with the specified /endpoint/path

    #The the metadata of every file (name, path, timestamp)

    #Generate the corresponding registration.json for every file

    #Retrun a csv list (separate lines) with the files to be registered.

}

#Prints the error "message" attribute in a json file to stderr
#Input <response-file> [response-code]
function print_error_message {

    USAGE="print_error_message <respone-file>"

    if [ "$#" -lt 1 ] 
    then
        echo "ERROR: using print_error_message" >&2
        echo "recieved $@" 
        echo "$USAGE" >&2
        exit 1
    fi

    RESPONSE_CODE="$2"
  
    if [ -z $RESPONSE_CODE   ]
    then
        echo "NO RESPONSE CODE"  >&2
        exit 1
    fi

    if [ ! -z "$RESPONSE_CODE" ] && [ "$RESPONSE_CODE" -ne 204 ]
    then
      ERROR_MSG=$(get_json_value $1 message) >&2
      echo "ERROR_CODE:$RESPONSE_CODE" >&2
      echo "ERROR_MESSAGE:\"$ERROR_MSG\"" >&2
      exit 1
    elif [ "$RESPONSE_CODE" -eq 204  ]
    then
      echo "ERROR_MESSAGE:\"no content for the specified item\"" >&2
      exit 1
    fi 
}

#Format json output
#Input: <json-file>
function print_json_message {

    USAGE="print_json_message <json-string-or-file>"

    if [ "$#" -lt 1 ] 
    then
        echo "ERROR: using print_json_message" >&2
        echo "recieved $@" 
        echo "$USAGE" >&2
        exit
    fi

    JSON_MESSAGE="$1"
    if [ ! -e "$JSON_MESSAGE" ]
    then
      echo "ERROR: Can not fin the file:\"$JSON_MESSAGE\"" >&2
      exit 
    fi 
    #Check if python json formatter is present
    echo "{}" | python -m json.tool > /dev/null
    if [ $? -eq 0 ]
    then 
      cat "$RESPONSE_MSG" | python -m json.tool
    else
      cat "$RESPONSE_MSG"
      echo 
    fi
}


#Check if a dataObject exists
#Input: <logical-path> 
function check_data_object  {

    USAGE="check_data_object <dataobject-path>"

    if [ "$#" -lt 1 ] 
    then
        echo "ERROR: using $0" >&2
        echo "recieved $@" 
        echo "$USAGE" >&2
        exit
    fi

    DATAOBJECT_PATH="$1"
    RESPONSE_HEADER="dxget-response-header.tmp"
    RESPONSE_MSG="dxget-response-message.tmp"
 
    dm_get_item   dataObject/$DATAOBJECT_PATH  "$RESPONSE_MSG" "$RESPONSE_HEADER"

    CODE=$(get_http_code $RESPONSE_HEADER) 
    if [ "$CODE" -eq 200 ]
    then
      exit 0
    elif [ "$CODE" -eq 204 ]
    then 
      exit 1
    else
      exit 2 
    fi 
}

#Returns the curl configuration argument
function get_config {

  local CONFIG_FILE=$HPC_DM_UTILS/tokens/curl-conf
  if [ ! -f $CONFIG_FILE ]
  then
    echo "Cannot find the configuration file $CONFIG_FILE" >&2 
    echo "Run dm_generate_token" >&2 
    exit 1
  fi
  echo "--config $CONFIG_FILE"
  
}

function check_java {

  java -version &>/dev/null
  if [ $? -ne 0 ]
  then 
    echo "No java found in PATH" >&2
    exit 1
  else
    local _java=java
  fi

  if [[ "$_java" ]]; then
    local java_version=$("$_java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
    if [[ "$java_version" < "1.8" ]]; then
      echo "java version is less than 1.8" >&2
      exit 1
    fi
  fi
}

#Returns the absolute path from a relative path for a directory
#Arguments:   <relative_path>
function myreadlink {
  relative_path=$1
  pushd $1 > /dev/null
  absolute_path=$(pwd)
  popd > /dev/null
  echo $absolute_path 
}


#Returns the absolute path from a relative path for a file
#Arguments:   <relative_path>
function myfilereadlink {
  relative_dir_path=$(dirname $1)
  pushd $relative_dir_path > /dev/null
  absolute_dir_path=$(pwd)
  popd > /dev/null
  echo $absolute_dir_path/$(basename $1)
}



#Returns if the path is either a collection or a dataObject or none
#Argument: <path>
function get_type  {

    local archive_path="$1"
    #Make sure the item exists and figure out if it is a collection or a dataobject
    local get_response_hdr=$HPC_DM_UTILS/temp/get_collection_response_header.tmp
    local get_response_msg=$HPC_DM_UTILS/temp/get_collection_response_message.json.tmp
    rm -f  $get_response_hdr 2>/dev/null
    rm -f $get_response_msg 2>/dev/null
    dm_get_item  collection/$archive_path "$get_response_msg" "$get_response_hdr" || exit 1
    
    code=$(get_http_code "$get_response_hdr")  || exit 1

    if [ "$code" -eq 200 ]
    then 
        rm -f $get_response_hdr 2>/dev/null
        rm -f $get_response_msg 2>/dev/null
        echo "collection"
        return 
    elif [ "$code" -ne 204 ] 
    then 
      print_error_message "$get_response_msg" "$code" 
      exit 1
    fi

    local get_response_hdr=$HPC_DM_UTILS/temp/get_dataobject_response_header.tmp
    local get_response_msg=$HPC_DM_UTILS/temp/get_dataobject_response_message.json.tmp
    rm -f $get_response_hdr 2>/dev/null
    rm -f $get_response_msg 2>/dev/null
    dm_get_item  dataObject/$archive_path "$get_response_msg" "$get_response_hdr" || exit 1
    code=$(get_http_code "$get_response_hdr")  || exit 1

    if [ "$code" -eq 200 ]
    then 
        echo "dataObject"
        rm -f $get_response_hdr 2>/dev/null
        rm -f $get_response_msg 2>/dev/null
        return 
    elif [ "$code" -ne 204 ] 
    then 
      print_error_message "$get_response_msg" "$code" 
      exit 1
    fi
}

#Convert the path in the correct format depending on the os
#Argument: <path>
#Returns: Converted-path
function convert_path {

  if [ -z "$1" ]
  then
    echo "ERROR: $FUNCNAME should accept one argument." >&2
    exit 1
  fi

  input_path="$1"
  case "$(uname -s)" in
    Darwin|Linux)
      echo $input_path
    ;;
    CYGWIN*|MINGW32*|MSYS*)
      echo $(cygpath -m "${input_path}")
    ;;
    *)
      echo 'Current OS not supported' 
      exit 1
    ;;
  esac
}
